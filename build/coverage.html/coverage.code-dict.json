{"/home/travis/build/npmtest/node-npmtest-coffee/test.js":"/* istanbul instrument in package npmtest_coffee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coffee/lib.npmtest_coffee.js":"/* istanbul instrument in package npmtest_coffee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_coffee = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_coffee = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-coffee/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-coffee && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_coffee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_coffee\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_coffee.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_coffee.rollup.js'] =\n            local.assetsDict['/assets.npmtest_coffee.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_coffee.__dirname + '/lib.npmtest_coffee.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-coffee/node_modules/coffee/index.js":"'use strict';\n\nvar path = require('path');\nvar findIstanbul = require('./lib/find_istanbul');\nvar Coffee = require('./lib/coffee');\n\n// child process always use the cwd of the main process\nprocess.env.coffee_cwd = process.cwd();\n// inject script supporting istanbul with multiple process\nprocess.env.istanbul_bin_path = findIstanbul();\nrequire('childprocess').inject(path.join(__dirname, 'lib/inject_istanbul.js'));\n\nexports.Coffee = Coffee;\n\n/**\n * fork a child process to test\n * @param {String} modulePath - The module to run in the child\n * @param {Array} args - List of string arguments\n * @param {Object} opt - fork options\n * @see https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options\n * @return {Coffee} coffee instance\n */\nexports.fork = function(modulePath, args, opt) {\n  return new Coffee({\n    method: 'fork',\n    cmd: modulePath,\n    args: args,\n    opt: opt,\n  });\n};\n\n/**\n * spawn a child process to test\n * @param  {String} cmd - The command to run\n * @param  {Array} args - List of string arguments\n * @param  {Object} opt - spawn options\n * @return {Coffee} coffee instance\n */\nexports.spawn = function(cmd, args, opt) {\n  return new Coffee({\n    method: 'spawn',\n    cmd: cmd,\n    args: args,\n    opt: opt,\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-coffee/node_modules/coffee/lib/find_istanbul.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar debug = require('debug')('coffee');\n\n// where is istanbul\nmodule.exports = function findIstanbul(opt) {\n  if (process.env.istanbul_bin_path) {\n    return process.env.istanbul_bin_path;\n  }\n  if (/\\/istanbul$/.test(process.env._)) {\n    debug('find istanbul %s', process.env._);\n    return process.env._;\n  }\n\n  var filepath;\n  var dirs = [];\n\n  // $PWD\n  dirs.push(process.cwd());\n\n  // depended by some tools\n  try {\n    if (process.env._) {\n      var entryBin = require.resolve(process.env._);\n      dirs.push(path.join(entryBin, '..'));\n      dirs.push(path.join(entryBin, '../..'));\n    }\n  } catch (_) {\n    // do nothing\n  }\n  // specified $PWD\n  opt && opt.cwd && dirs.push(opt.cwd);\n\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    filepath = path.join(dirs[i], 'node_modules/.bin/istanbul');\n    debug('finding istanbul %s', filepath);\n    if (fs.existsSync(filepath)) {\n      debug('found istanbul %s', filepath);\n      return filepath;\n    }\n  }\n  return '';\n};\n","/home/travis/build/npmtest/node-npmtest-coffee/node_modules/coffee/lib/coffee.js":"'use strict';\n\nvar util = require('util');\nvar EventEmitter = require('events');\nvar cp = require('child_process');\nvar assert = require('assert');\nvar debug = require('debug')('coffee');\nvar assertion = require('./assert');\nvar show = require('./show');\nvar Rule = require('./rule');\n\n// init coffee_inject_istanbul env\nprocess.env.coffee_inject_istanbul = 'false';\n\nmodule.exports = Coffee;\n\nfunction Coffee(opt) {\n  EventEmitter.call(this);\n  opt || (opt = {});\n  assert(opt.method && opt.cmd, 'should specify method and cmd');\n  this.method = opt.method;\n  this.cmd = opt.cmd;\n  this.args = opt.args;\n  this.opt = opt.opt;\n  this.restore();\n\n  var self = this;\n  this.on('stdout_data', function(buf) {\n    debug('output stdout `%s`', show(buf));\n    self._debug_stdout && process.stdout.write(buf);\n    self.stdout += buf;\n  });\n  this.on('stderr_data', function(buf) {\n    debug('output stderr `%s`', show(buf));\n    self._debug_stderr && process.stderr.write(buf);\n    self.stderr += buf;\n  });\n  this.on('error', function(err) {\n    self.error = err;\n  });\n  this.once('close', function(code) {\n    // restore coffee_inject_istanbul\n    process.env.coffee_inject_istanbul = 'false';\n    debug('output code `%s`', show(code));\n    self.code = code;\n    try {\n      assertion(self.waitAssert.stdout, self.stdout, 'match stdout');\n      assertion(self.waitAssert.stderr, self.stderr, 'match stderr');\n      assertion(self.waitAssert.code, self.code, 'match code');\n      self.error && assertion(self.waitAssert.error, self.error.message, 'match error message');\n    } catch (err) {\n      return done(err);\n    }\n    done();\n  });\n  function done(err) {\n    self.complete = true;\n    if (self.cb) {\n      self.cb.call(self, err, {\n        stdout: self.stdout,\n        stderr: self.stderr,\n        code: self.code,\n        error: self.error,\n      });\n    } else {\n      if (err) {\n        self.emit('complete_error', err);\n      } else {\n        self.emit('complete_success', {\n          stdout: self.stdout,\n          stderr: self.stderr,\n        });\n      }\n    }\n  }\n\n  if (process.env.COFFEE_DEBUG) {\n    this.debug(process.env.COFFEE_DEBUG);\n  }\n\n  process.nextTick(this._run.bind(this));\n}\n\nutil.inherits(Coffee, EventEmitter);\n\nCoffee.prototype.coverage = function(isCoverage) {\n  if (isCoverage === false) {\n    this._isCoverage = false;\n  }\n  return this;\n};\n\nCoffee.prototype.debug = function(level) {\n  this._debug_stdout = false;\n  this._debug_stderr = false;\n\n  // 0 (default) -> stdout + stderr\n  // 1 -> stdout\n  // 2 -> stderr\n  switch (String(level)) {\n    case '1':\n      this._debug_stdout = true;\n      break;\n    case '2':\n      this._debug_stderr = true;\n      break;\n    case 'false':\n      this._debug_stdout = false;\n      this._debug_stderr = false;\n      break;\n    default:\n      this._debug_stdout = true;\n      this._debug_stderr = true;\n  }\n\n  return this;\n};\n\n// Only accept these type below for assertion\nvar acceptType = ['stdout', 'stderr', 'code', 'error'];\n\nCoffee.prototype.expect = function(type, value) {\n  if (acceptType.indexOf(type) > -1) {\n    var rule = new Rule(value);\n    if (this.complete) {\n      assertion([ rule ], this[type], 'match ' + type);\n    } else {\n      this.waitAssert[type].push(rule);\n    }\n  }\n  return this;\n};\n\nCoffee.prototype.notExpect = function(type, value) {\n  if (acceptType.indexOf(type) > -1) {\n    var rule = new Rule(value, true);\n    if (this.complete) {\n      assertion([ rule ], this[type], 'match ' + type);\n    } else {\n      this.waitAssert[type].push(rule);\n    }\n  }\n  return this;\n};\n\n/*\n  Write data to stdin of the command\n*/\n\nCoffee.prototype.write = function(value) {\n  assert(!this._isEndCalled, 'can\\'t call write after end');\n  this.stdin.push(value);\n  return this;\n};\n\nCoffee.prototype.end = function(cb) {\n  this.cb = cb;\n  if (!cb) {\n    return new Promise((resolve, reject) => {\n      this.on('complete_success', resolve);\n      this.on('complete_error', reject);\n    });\n  }\n};\n\nCoffee.prototype._run = function() {\n  this._isEndCalled = true;\n  // inject istanbul when start with istanbul and set coverage true\n  // https://github.com/gotwarlost/istanbul#multiple-process-usage\n  process.env.coffee_inject_istanbul = process.env.running_under_istanbul ? this._isCoverage : false;\n  debug('coverage enable: %s', process.env.coffee_inject_istanbul);\n  var cmd = this.proc = run(this.method, this.cmd, this.args, this.opt);\n\n  cmd.stdout && cmd.stdout.on('data', this.emit.bind(this, 'stdout_data'));\n  cmd.stderr && cmd.stderr.on('data', this.emit.bind(this, 'stderr_data'));\n  cmd.once('error', this.emit.bind(this, 'error'));\n  cmd.once('close', this.emit.bind(this, 'close'));\n\n  if (this.stdin.length) {\n    this.stdin.forEach(function(buf) {\n      debug('input stdin `%s`', show(buf));\n      cmd.stdin.write(buf);\n    });\n    cmd.stdin.end();\n  }\n\n  return this;\n};\n\nCoffee.prototype.restore = function() {\n  // cache input for command\n  this.stdin = [];\n\n  // cache output for command\n  this.stdout = '';\n  this.stderr = '';\n  this.code = null;\n  this.error = null;\n\n  // cache expected output\n  this.waitAssert = {\n    stderr: [],\n    stdout: [],\n    code: [],\n    error: [],\n  };\n  this.complete = false;\n  this._isEndCalled = false;\n  this._debug_stdout = false;\n  this._debug_stderr = false;\n  this._isCoverage = true;\n  return this;\n};\n\nfunction run(method, cmd, args, opt) {\n  args = args || [];\n  opt = opt || {};\n\n  // Force pipe to parent\n  if (method === 'fork') {\n    // Boolean If true, stdin, stdout, and stderr of the child will be piped to the parent,\n    // otherwise they will be inherited from the parent\n    opt.silent = true;\n  }\n\n  debug('child_process.%s(\"%s\", [%s], %j)', method, cmd, args, opt);\n  return cp[method](cmd, args, opt);\n}\n","/home/travis/build/npmtest/node-npmtest-coffee/node_modules/coffee/lib/assert.js":"'use strict';\n\nvar assert = require('assert');\nvar debug = require('debug')('coffee:assert');\nvar show = require('./show');\n\nmodule.exports = function(expected, actual, message) {\n  expected.forEach(function(rule) {\n    let isOpposite = rule.isOpposite;\n    rule = rule.value;\n\n    if (Array.isArray(rule)) {\n      return module.exports(rule, actual, message);\n    }\n\n    if (rule instanceof Error) {\n      debug('error object %j', rule);\n      rule = rule.message;\n    }\n\n    debug('actual: `%s`, expected: `%s`, isOpposite: `%s`', show(actual), show(rule), isOpposite);\n\n    const msg = 'should' + (isOpposite ? ' not ' : ' ') + message;\n\n    if (rule instanceof RegExp) {\n      return assert.strictEqual(rule.test(actual), !isOpposite,\n        msg + ' expected `' + show(rule) + '` but actual `' + show(actual) + '`');\n    }\n\n    assert[isOpposite ? 'notStrictEqual' : 'strictEqual'](actual, rule,\n      msg + ' expected `' + show(rule) + '` but actual `' + show(actual) + '`');\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-coffee/node_modules/coffee/lib/show.js":"'use strict';\n\nmodule.exports = function show(obj) {\n  if (obj instanceof Buffer) {\n    obj = obj.toString();\n  }\n  // escape \\n to \\\\n for good view in terminal\n  return (typeof obj === 'string' ? obj.replace(/\\n/g, '\\\\n') : obj) +\n    '(' + {}.toString.call(obj).replace(/^\\[object (.*)\\]$/, '$1') + ')';\n};\n","/home/travis/build/npmtest/node-npmtest-coffee/node_modules/coffee/lib/rule.js":"'use strict';\n\nfunction Rule(val, isOpposite) {\n  if (Array.isArray(val)) {\n    this.value = val.map(function(item) {\n      return new Rule(item, isOpposite);\n    });\n  } else {\n    this.value = val;\n  }\n  this.isOpposite = isOpposite === true;\n}\n\nmodule.exports = Rule;\n","/home/travis/build/npmtest/node-npmtest-coffee/node_modules/coffee/lib/inject_istanbul.js":"'use strict';\n\nvar path = require('path');\n\nmodule.exports = function(modulePath, args, opt) {\n  if (process.env.coffee_inject_istanbul === 'false') {\n    return [modulePath, args, opt];\n  }\n  if (!process.env.istanbul_bin_path) {\n    console.warn('istanbul bin is not found');\n    return [modulePath, args, opt];\n  }\n\n  var cwd = process.env.coffee_cwd;\n  var istanbulBin = process.env.istanbul_bin_path;\n  var istanbulArgs = [\n    'cover',\n    '--report', 'none',\n    '--print', 'none',\n    '--include-pid',\n    '--root', cwd,\n    '--dir', path.join(cwd, 'coverage'),\n    modulePath,\n  ];\n  if (args && args.length) {\n    istanbulArgs.push('--');\n    istanbulArgs = istanbulArgs.concat(args);\n  }\n  return [istanbulBin, istanbulArgs, opt];\n};\n"}